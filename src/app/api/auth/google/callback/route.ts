// src/app/api/auth/google/callback/route.ts
import { NextResponse } from 'next/server';
import { OAuth2Client } from 'google-auth-library';
import { setLoginSession, isEmailTaken } from '@/lib/api/auth';

// –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL (–≤ dev –∏–ª–∏ production)
const getBaseUrl = () =>
  process.env.NEXT_PUBLIC_SITE_URL ?? 'http://localhost:3000';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OAuth
const client = new OAuth2Client(
  process.env.GOOGLE_AUTH_CLIENT_ID,
  process.env.GOOGLE_AUTH_CLIENT_SECRET,
  `${getBaseUrl()}/api/auth/google/callback`,
);

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const code = searchParams.get('code');
  const state = searchParams.get('state');
  const redirectPath = state ? decodeURIComponent(state) : '/';

  if (!code) {
    return NextResponse.redirect(
      `${getBaseUrl()}${redirectPath}?error=missing_token`,
    );
  }

  try {
    const { tokens } = await client.getToken(code);
    client.setCredentials(tokens);

    const ticket = await client.verifyIdToken({
      idToken: tokens.id_token!,
      audience: process.env.GOOGLE_AUTH_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    if (!payload?.email || !payload?.sub) {
      return NextResponse.redirect(
        `${getBaseUrl()}${redirectPath}?error=invalid_payload`,
      );
    }

    const uid = payload.sub;
    const email = payload.email;
    const name = payload.name ?? 'Unknown';

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email –≤ —Å–∏—Å—Ç–µ–º–µ (–ø–æ –≤—Å–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º)
    const emailTaken = await isEmailTaken(email);

    if (emailTaken) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
      const dbUrl = `${process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL}/users.json?auth=${process.env.FIREBASE_DB_SECRET}&orderBy="email"&equalTo="${email}"`;
      const checkRes = await fetch(dbUrl);
      const usersData = await checkRes.json();

      if (usersData) {
        const existingUser = Object.values(usersData)[0] as any;

        if (existingUser.provider === 'password') {
          // Email –∑–∞–Ω—è—Ç —Ä—É—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          console.log('‚õî Email already taken by manual registration');
          return NextResponse.redirect(
            `${getBaseUrl()}/signup?error=user_exists`,
          );
        }

        if (existingUser.provider === 'google') {
          // Email –∑–∞–Ω—è—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π Google-—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - –ª–æ–≥–∏–Ω–∏–º –º–æ–ª—á–∞
          console.log('‚úÖ User exists with Google provider, logging in');
          const response = NextResponse.redirect(
            `${getBaseUrl()}${redirectPath}`,
          );
          await setLoginSession(response, {
            email,
            name,
            sub: uid,
            picture: payload.picture,
          });
          return response;
        }
      }
    }

    // ‚úÖ Email —Å–≤–æ–±–æ–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚èé Creating new user in Firebase DB:', uid);
    const dbUrl = `${process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL}/users/${uid}.json?auth=${process.env.FIREBASE_DB_SECRET}`;

    await fetch(dbUrl, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email,
        username: name,
        createdAt: Date.now(),
        favorites: [],
        emailVerified: true,
        provider: 'google',
      }),
    });

    // –õ–æ–≥–∏–Ω–∏–º –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∫—É–¥–∞ –±—ã–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const response = NextResponse.redirect(`${getBaseUrl()}${redirectPath}`);
    await setLoginSession(response, {
      email,
      name,
      sub: uid,
      picture: payload.picture,
    });

    return response;
  } catch (err) {
    console.error('üî¥ Google Auth Error:', err);
    return NextResponse.redirect(
      `${getBaseUrl()}${redirectPath}?error=google_auth_failed`,
    );
  }
}
